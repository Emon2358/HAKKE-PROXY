name: 救っちょ@BBS Workflow

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'ユーザー名 (ゲストの場合は「O」)'
        required: true
        default: 'O'
      message:
        description: 'メッセージ (オプション)'
        required: false

jobs:
  救っちょ_bbs_chat:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      
      - name: Create 救っちょ@BBS Chat Script
        env:
          USERNAME: ${{ github.event.inputs.username }}
          INITIAL_MESSAGE: ${{ github.event.inputs.message }}
        run: |
          cat > 救っちょ_bbs_chat.py << EOL
          import os
          import sys
          import time
          import threading
          import uuid
          import json

          class 救っちょBBS:
              def __init__(self, username):
                  self.username = username if username else 'O'
                  self.session_id = str(uuid.uuid4())
                  self.messages_file = '救っちょ_bbs_messages.txt'
                  self.running = True

              def send_message(self, message):
                  """メッセージを送信"""
                  try:
                      # メッセージをファイルに追記
                      log_message = f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {self.username}> {message}"
                      with open(self.messages_file, 'a', encoding='utf-8') as f:
                          f.write(log_message + '\n')
                      
                      # 標準出力に直接表示
                      print(log_message, flush=True)
                  except Exception as e:
                      print(f"メッセージ送信エラー: {e}", flush=True)

              def read_recent_messages(self):
                  """最近のメッセージを読む"""
                  try:
                      with open(self.messages_file, 'r', encoding='utf-8') as f:
                          lines = f.readlines()
                      
                      # 最後の10メッセージを表示
                      recent_messages = lines[-10:]
                      for line in recent_messages:
                          print(line.strip(), flush=True)
                  except FileNotFoundError:
                      pass
                  except Exception as e:
                      print(f"メッセージ読み取りエラー: {e}", flush=True)

              def continuous_message_reader(self):
                  """継続的にメッセージを監視して表示"""
                  last_size = 0
                  while self.running:
                      try:
                          with open(self.messages_file, 'r', encoding='utf-8') as f:
                              f.seek(last_size)
                              new_messages = f.readlines()
                              
                              for msg in new_messages:
                                  print(msg.strip(), flush=True)
                              
                              last_size = f.tell()
                      except FileNotFoundError:
                          time.sleep(1)
                      except Exception as e:
                          print(f"メッセージ監視エラー: {e}", flush=True)
                      
                      time.sleep(1)

              def start_chat(self, initial_message=None):
                  """チャットセッションの開始"""
                  # 開始メッセージ
                  self.send_message("救っちょ@BBSセッションを開始します")
                  
                  # 初期メッセージがある場合は送信
                  if initial_message:
                      self.send_message(initial_message)

                  # メッセージ監視スレッド
                  reader_thread = threading.Thread(target=self.continuous_message_reader)
                  reader_thread.daemon = True
                  reader_thread.start()

                  # 6時間の制限
                  start_time = time.time()
                  max_duration = 6 * 60 * 60  # 6時間

                  print(f"救っちょ@BBS - {self.username}としてログイン", flush=True)
                  print("メッセージを入力 (exitで終了)", flush=True)

                  while time.time() - start_time < max_duration:
                      try:
                          # 標準入力から読み取り
                          message = input(f"{self.username}> ")
                          
                          if message.lower() in ['exit', 'quit']:
                              self.send_message("セッションを終了します")
                              break
                          
                          if message:
                              self.send_message(message)
                      
                      except EOFError:
                          # GitHub Actionsでの入力制限に対応
                          break
                      except KeyboardInterrupt:
                          break

                  # 終了処理
                  self.send_message("救っちょ@BBSセッションを終了します")
                  self.running = False

          def main():
              username = os.environ.get('USERNAME', 'O')
              initial_message = os.environ.get('INITIAL_MESSAGE', None)
              
              bbs = 救っちょBBS(username)
              bbs.start_chat(initial_message)

          if __name__ == "__main__":
              main()
          EOL

      - name: Run 救っちょ@BBS
        env:
          USERNAME: ${{ github.event.inputs.username }}
          INITIAL_MESSAGE: ${{ github.event.inputs.message }}
        run: |
          python 救っちょ_bbs_chat.py

      - name: Upload Chat Log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 救っちょ_bbs_log
          path: 救っちょ_bbs_messages.txt
