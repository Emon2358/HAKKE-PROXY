name:HAKKE PROXY

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to proxy'
        required: true
        default: 'https://example.com'

jobs:
  deploy-proxy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Generate Dynamic Nginx Configuration
      env:
        TARGET_URL: ${{ github.event.inputs.target_url || 'https://example.com' }}
      run: |
        # Nginx設定ディレクトリ作成
        mkdir -p nginx/conf.d
        
        # メインNginx設定
        cat > nginx/nginx.conf << EOL
        user  nginx;
        worker_processes  auto;
        
        error_log  /var/log/nginx/error.log warn;
        pid        /var/run/nginx.pid;
        
        events {
            worker_connections  1024;
        }
        
        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            
            log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                              '\$status \$body_bytes_sent "\$http_referer" '
                              '"\$http_user_agent" "\$http_x_forwarded_for"';
            
            access_log  /var/log/nginx/access.log  main;
            
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # SSL/セキュリティ設定
            proxy_ssl_server_name on;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            
            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            sendfile        on;
            keepalive_timeout  65;
            
            include /etc/nginx/conf.d/*.conf;
        }
        EOL
        
        # 動的プロキシ設定
        cat > nginx/conf.d/dynamic_proxy.conf << EOL
        server {
            listen 0.0.0.0:80;
            server_name localhost;
            
            location / {
                proxy_pass ${TARGET_URL};
                proxy_intercept_errors on;
                
                # クロスオリジンリソース共有（CORS）の設定
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                
                # キャッシュ制御
                proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
                proxy_cache_lock on;
                
                # エラーページの設定
                error_page 404 = @fallback;
                error_page 500 502 503 504 = @fallback;
            }
            
            # フォールバックロケーション
            location @fallback {
                return 302 ${TARGET_URL};
            }
            
            # セキュリティヘッダー
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options nosniff;
        }
        EOL
    
    - name: Create Dockerfile
      env:
        TARGET_URL: ${{ github.event.inputs.target_url || 'https://example.com' }}
      run: |
        cat > Dockerfile << EOL
        FROM nginx:latest
        
        # システム更新とセキュリティ強化
        RUN apt-get update && \
            apt-get upgrade -y && \
            apt-get install -y curl ca-certificates && \
            rm -rf /var/lib/apt/lists/*
        
        # カスタム設定をコピー
        COPY nginx/nginx.conf /etc/nginx/nginx.conf
        COPY nginx/conf.d/dynamic_proxy.conf /etc/nginx/conf.d/dynamic_proxy.conf
        
        # デバッグ用のインデックスページ
        RUN echo "<!DOCTYPE html>" > /usr/share/nginx/html/index.html && \
            echo "<html><body>" >> /usr/share/nginx/html/index.html && \
            echo "<h1>Dynamic Proxy Server</h1>" >> /usr/share/nginx/html/index.html && \
            echo "<p>Proxying to: ${TARGET_URL}</p>" >> /usr/share/nginx/html/index.html && \
            echo "</body></html>" >> /usr/share/nginx/html/index.html
        
        # Nginx設定の権限を修正
        RUN chmod 644 /etc/nginx/nginx.conf /etc/nginx/conf.d/dynamic_proxy.conf
        
        # ユーザーを変更してセキュリティを強化
        RUN chown -R nginx:nginx /etc/nginx /var/cache/nginx /var/log/nginx
        
        EXPOSE 80
        
        # エントリーポイントスクリプトを追加
        COPY entrypoint.sh /entrypoint.sh
        RUN chmod +x /entrypoint.sh
        
        ENTRYPOINT ["/entrypoint.sh"]
        EOL
        
        # エントリーポイントスクリプトを作成
        cat > entrypoint.sh << EOL
        #!/bin/bash
        set -e
        
        # Nginx設定の最終チェック
        nginx -t
        
        # Nginxをフォアグラウンドで起動
        exec nginx -g "daemon off;"
        EOL
    
    - name: Build and Test Nginx Proxy
      run: |
        # Dockerイメージをビルド
        docker build -t dynamic-nginx-proxy .
        
        # コンテナを起動（ネットワークモードをホストに変更）
        docker run -d --network host --name proxy-container dynamic-nginx-proxy
        
        # 起動を待つ
        sleep 10
        
        # コンテナログを表示
        docker logs proxy-container
        
        # プロキシの動作を確認（高度な接続チェック）
        max_attempts=5
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          # より詳細な接続テスト
          response=$(curl -v -L -m 15 \
            -H "User-Agent: GitHub-Actions-Proxy-Check" \
            -H "Accept: text/html,application/xhtml+xml,application/xml" \
            http://localhost || true)
          
          if [ $? -eq 0 ]; then
            echo "Successful connection to proxy"
            # レスポンスの最初の10行を表示
            echo "$response" | head -n 10
            break
          fi
          
          echo "Attempt $((attempt+1)) failed. Retrying..."
          attempt=$((attempt+1))
          sleep 5
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "Failed to connect to proxy after $max_attempts attempts"
          docker ps
          docker logs proxy-container
          exit 1
        fi
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
