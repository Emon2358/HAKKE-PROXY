name: HAKKE PROXY

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to proxy'
        required: true
        default: 'https://example.com'

jobs:
  dynamic-proxy-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python_version: '3.9'
      
      - name: Generate Nginx Configuration
        env:
          TARGET_URL: ${{ github.event.inputs.target_url }}
        run: |
          mkdir -p nginx/conf.d
          
          # Nginx主設定
          cat > nginx/nginx.conf << EOL
          user  nginx;
          worker_processes  auto;
          
          error_log  /var/log/nginx/error.log warn;
          pid        /var/run/nginx.pid;
          
          events {
              worker_connections  1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                                '\$status \$body_bytes_sent "\$http_referer" '
                                '"\$http_user_agent" "\$http_x_forwarded_for"';
              
              access_log  /var/log/nginx/access.log  main;
              
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
              
              sendfile        on;
              keepalive_timeout  65;
              
              include /etc/nginx/conf.d/*.conf;
          }
          EOL
          
          # プロキシ設定
          cat > nginx/conf.d/proxy.conf << EOL
          server {
              listen 8080;
              server_name localhost;
              
              location / {
                  proxy_pass ${TARGET_URL};
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  
                  # CORS設定
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  
                  # エラーハンドリング
                  proxy_intercept_errors on;
                  error_page 404 = @fallback;
              }
              
              location @fallback {
                  return 302 ${TARGET_URL};
              }
          }
          EOL
      
      - name: Create Python Proxy Monitoring Script
        run: |
          cat > proxy_monitor.py << EOL
          import requests
          import time
          import os
          import logging
          
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          TARGET_URL = os.environ.get('TARGET_URL', 'https://example.com')
          
          def check_proxy_status():
              try:
                  # プロキシ経由でターゲットにアクセス
                  response = requests.get(
                      f'http://localhost:8080', 
                      timeout=10
                  )
                  logger.info(f"Proxy Status: {response.status_code}")
                  return response.status_code == 200
              except Exception as e:
                  logger.error(f"Proxy Check Failed: {e}")
                  return False
          
          def main():
              max_attempts = 5
              for attempt in range(max_attempts):
                  if check_proxy_status():
                      logger.info("Proxy is operational")
                      return
                  
                  logger.warning(f"Proxy check failed. Attempt {attempt + 1}/{max_attempts}")
                  time.sleep(2)
              
              logger.error("Proxy monitoring failed after multiple attempts")
              raise Exception("Proxy is not functioning")
          
          if __name__ == "__main__":
              main()
          EOL
      
      - name: Start Nginx Proxy
        env:
          TARGET_URL: ${{ github.event.inputs.target_url }}
        run: |
          # Nginxをインストール
          sudo apt-get update
          sudo apt-get install -y nginx
          
          # Nginx設定をコピー
          sudo cp -r nginx/nginx.conf /etc/nginx/nginx.conf
          sudo cp -r nginx/conf.d/proxy.conf /etc/nginx/conf.d/proxy.conf
          
          # Nginxを起動
          sudo nginx
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Monitor Proxy
        env:
          TARGET_URL: ${{ github.event.inputs.target_url }}
        run: |
          python proxy_monitor.py
      
      - name: Create Proxy Report
        env:
          TARGET_URL: ${{ github.event.inputs.target_url }}
        run: |
          # プロキシ情報レポートを生成
          cat > PROXY_REPORT.md << EOL
          # Dynamic Proxy Report
          
          ## Configuration
          - **Target URL**: ${TARGET_URL}
          - **Proxy Endpoint**: http://localhost:8080
          
          ## Monitoring Results
          - Timestamp: $(date)
          - Status: Operational
          
          ### How to Use
          1. Access the proxied site via the GitHub Actions environment
          2. Use the proxy endpoint for further testing
          EOL
      
      - name: Upload Proxy Report
        uses: actions/upload-artifact@v3
        with:
          name: proxy-report
          path: PROXY_REPORT.md
